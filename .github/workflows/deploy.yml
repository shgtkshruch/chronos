name: Deploy

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'deploy envirionment'
        default: 'dev'
      rails:
        description: 'deploy rails service'
        default: 'false'
      nuxt:
        description: 'deploy nuxt service'
        default: 'false'
      maintenance:
        description: 'mainteance or not'
        default: 'false'

env:
  COPILOT_VERSION: v1.8.0

jobs:
  build-rails-image:
    if: ${{ github.event.inputs.rails == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build bundle stage
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile.prod
        target: bundle
        cache-from: type=local,src=/tmp/.buildx-cache/bundle
        cache-to: type=local,dest=/tmp/.buildx-cache-new/bundle

    - name: Build npm stage
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile.prod
        target: npm
        cache-from: type=local,src=/tmp/.buildx-cache/npm
        cache-to: type=local,dest=/tmp/.buildx-cache-new/npm

    - name: Build docker image
      id: docker-build
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/chronos/rails:${{ github.sha }}
        cache-from: |
          type=local,src=/tmp/.buildx-cache-new/bundle
          type=local,src=/tmp/.buildx-cache-new/npm
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-nuxt-image:
    if: ${{ github.event.inputs.nuxt == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build docker image
      id: docker-build
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/chronos/frontend:${{ github.sha }}
        cache-from: |
          type=local,src=/tmp/.buildx-cache-new/bundle
          type=local,src=/tmp/.buildx-cache-new/npm
        cache-to: type=local,dest=/tmp/.buildx-cache-new

  maintenacne-on:
    if: ${{ always() && github.event.inputs.maintenance == 'true'}}
    needs: [build-rails-image, build-nuxt-image]
    environment:
      name: ${{ github.event.inputs.env }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup AWS Copilot
      run: |
        curl -Lo copilot-linux https://github.com/aws/copilot-cli/releases/download/${{ env.COPILOT_VERSION }}/copilot-linux
        chmod +x copilot-linux
        sudo mv copilot-linux /usr/local/bin/copilot

    - name: Trun on maintenance mode
      run: |
        copilot svc exec \
          --app chronos \
          --env ${{ github.event.inputs.env }} \
          --svc rails \
          --command 'bin/maintenance on'

  rails-migration:
    if: ${{ always() && github.event.inputs.rails == 'true' }}
    needs: [maintenacne-on]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup AWS Copilot
      run: |
        curl -Lo copilot-linux https://github.com/aws/copilot-cli/releases/download/${{ env.COPILOT_VERSION }}/copilot-linux
        chmod +x copilot-linux
        sudo mv copilot-linux /usr/local/bin/copilot

    - name: Run migration
      run: |
        echo "copilot svc exec \
          --command 'bin/rails db:migrate' \
          --app chronos \
          --env ${{ github.event.inputs.env }} \
          --name rails"

  rails-service-deploy:
    if: ${{ always() && github.event.inputs.rails == 'true' }}
    needs: [rails-migration]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup AWS Copilot
      run: |
        curl -Lo copilot-linux https://github.com/aws/copilot-cli/releases/download/${{ env.COPILOT_VERSION }}/copilot-linux
        chmod +x copilot-linux
        sudo mv copilot-linux /usr/local/bin/copilot

    - name: Replace docker image tag to github sha
      run: |
        services=$(copilot svc ls --json | jq -r '.services[] .name')

        for workload in $services
        do
          manifest_path="copilot/$workload/manifest.yml"
          sed -i -e 's/<image_tag>/${{ github.sha }}/' $manifest_path
        done

    - name: Deploy Rails service
      run: |
        copilot svc deploy \
          --app chronos \
          --env ${{ github.event.inputs.env }} \
          --name rails

  rails-job-deploy:
    if: ${{ always() && github.event.inputs.rails == 'true' }}
    needs: [rails-migration]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup AWS Copilot
      run: |
        curl -Lo copilot-linux https://github.com/aws/copilot-cli/releases/download/${{ env.COPILOT_VERSION }}/copilot-linux
        chmod +x copilot-linux
        sudo mv copilot-linux /usr/local/bin/copilot

    - name: Replace docker image tag to github sha
      run: |
        jobs=$(copilot job ls --json | jq -r '.jobs[] .name')

        for workload in $jobs
        do
          manifest_path="copilot/$workload/manifest.yml"
          sed -i -e 's/<image_tag>/${{ github.sha }}/' $manifest_path
        done

    - name: Deploy scheduled jobs
      run: |
        copilot job deploy \
          --app chronos \
          --env ${{ github.event.inputs.env }}

  nuxt-deploy:
    if: ${{ always() && github.event.inputs.nuxt == 'true' }}
    needs: [rails-migration]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup AWS Copilot
      run: |
        curl -Lo copilot-linux https://github.com/aws/copilot-cli/releases/download/${{ env.COPILOT_VERSION }}/copilot-linux
        chmod +x copilot-linux
        sudo mv copilot-linux /usr/local/bin/copilot

    - name: Deploy frontend service
      run: |
        copilot svc deploy \
          --app chronos \
          --env ${{ github.event.inputs.env }} \
          --name frontend

  maintenacne-off:
    if: ${{ always() && github.event.inputs.maintenance == 'true' }}
    needs: [rails-service-deploy, rails-job-deploy, nuxt-deploy]
    environment:
      name: ${{ github.event.inputs.env }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup AWS Copilot
      run: |
        curl -Lo copilot-linux https://github.com/aws/copilot-cli/releases/download/${{ env.COPILOT_VERSION }}/copilot-linux
        chmod +x copilot-linux
        sudo mv copilot-linux /usr/local/bin/copilot

    - name: Turn off maintenance mode
      run: |
        copilot svc exec \
          --app chronos \
          --env ${{ github.event.inputs.env }} \
          --svc rails \
          --command 'bin/maintenance off'
